/* build with:
* ./gradlew publish
* or:
* ./gradlew publishToMavenLocal
*
* to update this wrapper version
* $ gradle wrapper --gradle-version 6.7 --distribution-type all
*/

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
    }
}

// grails 4 defaults
apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
// apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

// extra
apply plugin: "application"
apply plugin: 'maven-publish'
apply plugin: 'signing'

version "4.0.1"
// group "org.grails.plugins"
group "net.codebuilders"
// mainClassName = 'grails.paypal.Application'
// mainClassName = 'org.openoffice.FakeClassName'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots
}

repositories {
    // mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

// new block for grails 4
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // standard 4.0 plugin
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    // needed for groovydoc - not included in groovy jar anymore
    compile "org.codehaus.groovy:groovy-dateutil"

}

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

/*
grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe:"John Doe"]
}
*/

// custom for grails-paypal below here...


assets {
    packagePlugin = true
}


// exclude assets that are already present in main app
jar {
    exclude "**/META-INF/assets/**"
    exclude "**/META-INF/assets.list"
}

groovydoc {
    docTitle = "Grails Paypal Plugin"
    header = "Code Builders, LLC" // doesn't seem to work
    footer = "Generated documentation ${version}"
    windowTitle = docTitle
    use = true // create class and package usage pages
}

archivesBaseName = 'grails-paypal'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'grails-paypal'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Grails Paypal Plugin'
                packaging = 'jar'
                description = 'A Grails 4.0 plugin for E-Commerce'
                url = 'http://codebuilders.net'
                inceptionYear = '2016'

                scm {
                    url = 'https://github.com/cbmarcum/grails-paypal'
                    developerConnection = 'https://github.com/cbmarcum/grails-paypal'
                    connection = 'https://github.com/cbmarcum/grails-paypal'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Graeme Rocher'
                    }
                    developer {
                        name = 'Matt Stine'
                    }
                    developer {
                        name = 'Matthias Bohlen'
                    }
                    developer {
                        name = 'Carl Marcum'
                        email = 'carl.marcum@codebuilders.net'
                        url = 'http://codebuilders.net'
                        organization = 'Code Builders, LLC'
                        organizationUrl = 'http://codebuilders.net'

                    }
                }
            }
        }
    }

    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    // only pgp sign if not a snapshot and we are uploading to maven repo
    required { isReleaseVersion }
    sign publishing.publications.mavenJava
    sign configurations.archives
}

// MAY WANT THIS WITH GROOVYDOC ??
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
